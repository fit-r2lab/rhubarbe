# /etc/rhubarbe/rhubarbe.conf
# .ini format
# can be overridden - on individual values basis - no need to copy it all
# in either
# /etc/rhubarbe/rhubarbe.conf.local (mostly for passwords and the like)
# ~/.rhubarbe.conf
# ./rhubarbe.conf
#
# Also a given variable foo can have different values depending on the hostname
# foo = the-general-value
# foo.myhostname = the-specific-value-for-myhostname
# see the bandwidth example below


[plcapi]
# the details of the PLCAPI service
url = https://r2labapi.inria.fr:443/PLCAPI/

# you need to set these in rhubarbe.conf.local
# [plcapi]
# admin_email = to-be-redefined
# admin_password = to-be-redefined
# fill the local email/password in /etc/rhubarbe/rhubarbe.conf.local
# and of course make sure it is readable only by root
# root@faraday ~ # ls -l /etc/rhubarbe/rhubarbe.conf.local
# -rw------- 1 root root 159 Dec 16 14:26 /etc/rhubarbe/rhubarbe.conf.local

# the hostname for the node used to attach leases
leases_hostname = faraday.inria.fr


[testbed]
# the prefix that hostnames are based on
regularname = fit

# same for the CMC interfaces
rebootname = reboot

# where to find the inventory json file
inventory_nodes_path = /etc/rhubarbe/inventory-nodes.json
inventory_phones_path = /etc/rhubarbe/inventory-phones.json

# what should the -a option do based on hostname
all_scope.faraday = 1-37

# the scope of preplab is managed separately
# in /etc/rhubarbe/rhubarbe.conf.local
#all_scope.etourdi=38-42


[nodes]
# after a reset, how long should we wait
idle_after_reset = 15

# how long to wait for telnet after a reset in stage1
timeout_before_telnet = 80

# default timeout for the various commands
load_default_timeout = 300
save_default_timeout = 300

# etourdi is slower
load_default_timeout.etourdi = 900
save_default_timeout.etourdi = 900

# for 'status', 'on', 'off', 'info'
cmc_default_timeout = 3
wait_default_timeout = 60


[pxelinux]
# where does pxelinux look for host-based symlinks
config_dir = /tftpboot/pxelinux.cfg/

# the name of the image that has telnet + frisbee
frisbee_image = pxefrisbee


[frisbee]
# should not be necessary to mention their path here
images_dir = /var/lib/rhubarbe-images
default_image = default.ndz

# loading images
server = frisbeed
server_options = -K 3
client = frisbee

# saving images
imagezip = imagezip

# qualify with /bin - just a convenience at devel time for pgrep
#netcat = /bin/nc
netcat = nc

# choose between 'fedora' (run nc < /dev/null) or 'ubuntu' (run nc -d)
netcat_style = ubuntu

# this might need to be configurable on the command line ?
hard_drive = /dev/sda

# the partition where to expect /etc for storing /etc/rhubarbe-image
# set to none to disable the feature
root_partition = /dev/sda1

# mount point to mount /etc when creating /etc/rhubarbe-image
mount_point = /mnt


[networking]
telnet_port = 23

# how much time to wait between 2 attempts to telnet
telnet_backoff = 3
ssh_backoff = 3

# how long to wait before giving up
ssh_timeout = 3
ping_timeout = 2
telnet_timeout = 2

# ranges to use for the multicast traffic
# 2 separate sessions need
# 2 different IP addresses so that IGMP can ensure the traffic
# is correctly isolated from one another
# and 2 different port numbers because otherwise the second frisbeed
# cannot bind its port
pattern_multicast = 234.5.6.*
pattern_port = 10000 + *

# will replace '*' with values from 1 to this limit
pattern_size = 20

# in Mibps (multiplied by 2**20)
bandwidth = 50

### for any of the config variables you can also define a value
# for a specific hostname. This feature is designed to maintain a single
# config file for several hosts
# for exemple for the r2lab gateway that is known as faraday.inria.fr
bandwidth.faraday = 500

# but its attached preplab (etourdi.pl.sophia.inria.fr) is much less powerful
bandwidth.etourdi = 90


[monitor]
# how often to do this (sleep between 2 probes of the same node)
# it's not called a period so each node lives its own life
# plus, it takes some non-negligible time to actually probe a node
cycle_nodes = 2

# cycle for acquiring leases
cycle_leases = 60

# internal cycle for checking for messages on the back-channel chan-leases-request
# this is awkward, and only because we could not find a decent asyncio-friendly
# implementation of socket.io
# every 'step' seconds
step_leases = 1

# we wait for 'wait' seconds to see if there's something on the back channel
# don't wait for too long because this is synchroneous
wait_leases = 0.1

# this truly is periodic; every period we log an entry in /var/log/monitor.log
log_period = 4

# cycle for the monitorphones loop
cycle_phones = 2


[sidecar]
# where to report the data (a socketIO server)
url = https://r2lab.inria.fr:999/

# the socketIO channel to use
# where monitor is to send status data
channel_nodes = info:nodes

# where monitorphones to send phones data
channel_phones = info:phones

# where to send leases data
channel_leases = info:leases

# if we receive something (anything) on this one
# we by-pass the lease acquisition cycle and go immediately
# to re-acquisition
channel_leases_request = request:leases


[accounts]
# three options for the access policy:
# (*) open: all known and valid slices remain ssh-reachable at all times
# (*) leased: only the lease that currently has a valid lease can ssh-enter
# (*) closed: no slice can enter the testdbed at any time
access_policy = leased

# how often should we probe the API to refresh accounts and authorized_keys
# as of dec. 2016 it takes .1 s, so every minute seems about right
cycle = 60

# a comma-separated list of account names that don't need a lease
# it is safer to not mention here a login that has an '_' in it
# especially with the 'closed' access policy
privileged = root,guest
